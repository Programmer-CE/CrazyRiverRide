// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ControlPlayer.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ControlPlayer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ControlPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ControlPlayer_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ControlPlayer_2eproto() {
  protobuf_AddDesc_ControlPlayer_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ControlPlayer.proto");
  GOOGLE_CHECK(file != NULL);
  ControlPlayer_descriptor_ = file->message_type(0);
  static const int ControlPlayer_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlPlayer, num_of_player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlPlayer, xvelocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlPlayer, yvelocity_),
  };
  ControlPlayer_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ControlPlayer_descriptor_,
      ControlPlayer::default_instance_,
      ControlPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlPlayer, _has_bits_[0]),
      -1,
      -1,
      sizeof(ControlPlayer),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlPlayer, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ControlPlayer_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ControlPlayer_descriptor_, &ControlPlayer::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ControlPlayer_2eproto() {
  delete ControlPlayer::default_instance_;
  delete ControlPlayer_reflection_;
}

void protobuf_AddDesc_ControlPlayer_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023ControlPlayer.proto\"L\n\rControlPlayer\022\025"
    "\n\rNUM_OF_PLAYER\030\001 \002(\005\022\021\n\tXVelocity\030\002 \002(\005"
    "\022\021\n\tYVelocity\030\003 \002(\005", 99);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ControlPlayer.proto", &protobuf_RegisterTypes);
  ControlPlayer::default_instance_ = new ControlPlayer();
  ControlPlayer::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ControlPlayer_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ControlPlayer_2eproto {
  StaticDescriptorInitializer_ControlPlayer_2eproto() {
    protobuf_AddDesc_ControlPlayer_2eproto();
  }
} static_descriptor_initializer_ControlPlayer_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int ControlPlayer::kNUMOFPLAYERFieldNumber;
const int ControlPlayer::kXVelocityFieldNumber;
const int ControlPlayer::kYVelocityFieldNumber;
#endif  // !_MSC_VER

ControlPlayer::ControlPlayer()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ControlPlayer)
}

void ControlPlayer::InitAsDefaultInstance() {
}

ControlPlayer::ControlPlayer(const ControlPlayer& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ControlPlayer)
}

void ControlPlayer::SharedCtor() {
  _cached_size_ = 0;
  num_of_player_ = 0;
  xvelocity_ = 0;
  yvelocity_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ControlPlayer::~ControlPlayer() {
  // @@protoc_insertion_point(destructor:ControlPlayer)
  SharedDtor();
}

void ControlPlayer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ControlPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ControlPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ControlPlayer_descriptor_;
}

const ControlPlayer& ControlPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ControlPlayer_2eproto();
  return *default_instance_;
}

ControlPlayer* ControlPlayer::default_instance_ = NULL;

ControlPlayer* ControlPlayer::New(::google::protobuf::Arena* arena) const {
  ControlPlayer* n = new ControlPlayer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ControlPlayer::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ControlPlayer*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(num_of_player_, yvelocity_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ControlPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ControlPlayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 NUM_OF_PLAYER = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_of_player_)));
          set_has_num_of_player();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_XVelocity;
        break;
      }

      // required int32 XVelocity = 2;
      case 2: {
        if (tag == 16) {
         parse_XVelocity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xvelocity_)));
          set_has_xvelocity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_YVelocity;
        break;
      }

      // required int32 YVelocity = 3;
      case 3: {
        if (tag == 24) {
         parse_YVelocity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &yvelocity_)));
          set_has_yvelocity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ControlPlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ControlPlayer)
  return false;
#undef DO_
}

void ControlPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ControlPlayer)
  // required int32 NUM_OF_PLAYER = 1;
  if (has_num_of_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num_of_player(), output);
  }

  // required int32 XVelocity = 2;
  if (has_xvelocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->xvelocity(), output);
  }

  // required int32 YVelocity = 3;
  if (has_yvelocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->yvelocity(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ControlPlayer)
}

::google::protobuf::uint8* ControlPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ControlPlayer)
  // required int32 NUM_OF_PLAYER = 1;
  if (has_num_of_player()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num_of_player(), target);
  }

  // required int32 XVelocity = 2;
  if (has_xvelocity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->xvelocity(), target);
  }

  // required int32 YVelocity = 3;
  if (has_yvelocity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->yvelocity(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ControlPlayer)
  return target;
}

int ControlPlayer::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_num_of_player()) {
    // required int32 NUM_OF_PLAYER = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_of_player());
  }

  if (has_xvelocity()) {
    // required int32 XVelocity = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->xvelocity());
  }

  if (has_yvelocity()) {
    // required int32 YVelocity = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->yvelocity());
  }

  return total_size;
}
int ControlPlayer::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 NUM_OF_PLAYER = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_of_player());

    // required int32 XVelocity = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->xvelocity());

    // required int32 YVelocity = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->yvelocity());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ControlPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ControlPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ControlPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ControlPlayer::MergeFrom(const ControlPlayer& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num_of_player()) {
      set_num_of_player(from.num_of_player());
    }
    if (from.has_xvelocity()) {
      set_xvelocity(from.xvelocity());
    }
    if (from.has_yvelocity()) {
      set_yvelocity(from.yvelocity());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ControlPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControlPlayer::CopyFrom(const ControlPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlPlayer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ControlPlayer::Swap(ControlPlayer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ControlPlayer::InternalSwap(ControlPlayer* other) {
  std::swap(num_of_player_, other->num_of_player_);
  std::swap(xvelocity_, other->xvelocity_);
  std::swap(yvelocity_, other->yvelocity_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ControlPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ControlPlayer_descriptor_;
  metadata.reflection = ControlPlayer_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
