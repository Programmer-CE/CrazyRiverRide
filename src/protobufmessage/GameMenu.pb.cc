// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameMenu.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GameMenu.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GameMenu_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameMenu_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_GameMenu_2eproto() {
  protobuf_AddDesc_GameMenu_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GameMenu.proto");
  GOOGLE_CHECK(file != NULL);
  GameMenu_descriptor_ = file->message_type(0);
  static const int GameMenu_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMenu, buttonx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMenu, buttony_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMenu, buttonwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMenu, buttonheight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMenu, buttonactive_),
  };
  GameMenu_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GameMenu_descriptor_,
      GameMenu::default_instance_,
      GameMenu_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMenu, _has_bits_[0]),
      -1,
      -1,
      sizeof(GameMenu),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMenu, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GameMenu_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GameMenu_descriptor_, &GameMenu::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GameMenu_2eproto() {
  delete GameMenu::default_instance_;
  delete GameMenu_reflection_;
}

void protobuf_AddDesc_GameMenu_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016GameMenu.proto\"m\n\010GameMenu\022\017\n\007ButtonX\030"
    "\001 \002(\005\022\017\n\007ButtonY\030\002 \002(\005\022\023\n\013ButtonWidth\030\003 "
    "\002(\005\022\024\n\014ButtonHeight\030\004 \002(\005\022\024\n\014ButtonActiv"
    "e\030\005 \002(\010", 127);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GameMenu.proto", &protobuf_RegisterTypes);
  GameMenu::default_instance_ = new GameMenu();
  GameMenu::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GameMenu_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GameMenu_2eproto {
  StaticDescriptorInitializer_GameMenu_2eproto() {
    protobuf_AddDesc_GameMenu_2eproto();
  }
} static_descriptor_initializer_GameMenu_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int GameMenu::kButtonXFieldNumber;
const int GameMenu::kButtonYFieldNumber;
const int GameMenu::kButtonWidthFieldNumber;
const int GameMenu::kButtonHeightFieldNumber;
const int GameMenu::kButtonActiveFieldNumber;
#endif  // !_MSC_VER

GameMenu::GameMenu()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMenu)
}

void GameMenu::InitAsDefaultInstance() {
}

GameMenu::GameMenu(const GameMenu& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GameMenu)
}

void GameMenu::SharedCtor() {
  _cached_size_ = 0;
  buttonx_ = 0;
  buttony_ = 0;
  buttonwidth_ = 0;
  buttonheight_ = 0;
  buttonactive_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameMenu::~GameMenu() {
  // @@protoc_insertion_point(destructor:GameMenu)
  SharedDtor();
}

void GameMenu::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameMenu::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameMenu::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameMenu_descriptor_;
}

const GameMenu& GameMenu::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMenu_2eproto();
  return *default_instance_;
}

GameMenu* GameMenu::default_instance_ = NULL;

GameMenu* GameMenu::New(::google::protobuf::Arena* arena) const {
  GameMenu* n = new GameMenu;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameMenu::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GameMenu*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(buttonx_, buttonactive_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GameMenu::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMenu)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ButtonX = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buttonx_)));
          set_has_buttonx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ButtonY;
        break;
      }

      // required int32 ButtonY = 2;
      case 2: {
        if (tag == 16) {
         parse_ButtonY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buttony_)));
          set_has_buttony();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ButtonWidth;
        break;
      }

      // required int32 ButtonWidth = 3;
      case 3: {
        if (tag == 24) {
         parse_ButtonWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buttonwidth_)));
          set_has_buttonwidth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ButtonHeight;
        break;
      }

      // required int32 ButtonHeight = 4;
      case 4: {
        if (tag == 32) {
         parse_ButtonHeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buttonheight_)));
          set_has_buttonheight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ButtonActive;
        break;
      }

      // required bool ButtonActive = 5;
      case 5: {
        if (tag == 40) {
         parse_ButtonActive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &buttonactive_)));
          set_has_buttonactive();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMenu)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMenu)
  return false;
#undef DO_
}

void GameMenu::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMenu)
  // required int32 ButtonX = 1;
  if (has_buttonx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->buttonx(), output);
  }

  // required int32 ButtonY = 2;
  if (has_buttony()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->buttony(), output);
  }

  // required int32 ButtonWidth = 3;
  if (has_buttonwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->buttonwidth(), output);
  }

  // required int32 ButtonHeight = 4;
  if (has_buttonheight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->buttonheight(), output);
  }

  // required bool ButtonActive = 5;
  if (has_buttonactive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->buttonactive(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMenu)
}

::google::protobuf::uint8* GameMenu::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameMenu)
  // required int32 ButtonX = 1;
  if (has_buttonx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->buttonx(), target);
  }

  // required int32 ButtonY = 2;
  if (has_buttony()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->buttony(), target);
  }

  // required int32 ButtonWidth = 3;
  if (has_buttonwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->buttonwidth(), target);
  }

  // required int32 ButtonHeight = 4;
  if (has_buttonheight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->buttonheight(), target);
  }

  // required bool ButtonActive = 5;
  if (has_buttonactive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->buttonactive(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMenu)
  return target;
}

int GameMenu::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_buttonx()) {
    // required int32 ButtonX = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->buttonx());
  }

  if (has_buttony()) {
    // required int32 ButtonY = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->buttony());
  }

  if (has_buttonwidth()) {
    // required int32 ButtonWidth = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->buttonwidth());
  }

  if (has_buttonheight()) {
    // required int32 ButtonHeight = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->buttonheight());
  }

  if (has_buttonactive()) {
    // required bool ButtonActive = 5;
    total_size += 1 + 1;
  }

  return total_size;
}
int GameMenu::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required int32 ButtonX = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->buttonx());

    // required int32 ButtonY = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->buttony());

    // required int32 ButtonWidth = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->buttonwidth());

    // required int32 ButtonHeight = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->buttonheight());

    // required bool ButtonActive = 5;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameMenu::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GameMenu* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameMenu*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameMenu::MergeFrom(const GameMenu& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buttonx()) {
      set_buttonx(from.buttonx());
    }
    if (from.has_buttony()) {
      set_buttony(from.buttony());
    }
    if (from.has_buttonwidth()) {
      set_buttonwidth(from.buttonwidth());
    }
    if (from.has_buttonheight()) {
      set_buttonheight(from.buttonheight());
    }
    if (from.has_buttonactive()) {
      set_buttonactive(from.buttonactive());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GameMenu::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameMenu::CopyFrom(const GameMenu& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameMenu::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void GameMenu::Swap(GameMenu* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameMenu::InternalSwap(GameMenu* other) {
  std::swap(buttonx_, other->buttonx_);
  std::swap(buttony_, other->buttony_);
  std::swap(buttonwidth_, other->buttonwidth_);
  std::swap(buttonheight_, other->buttonheight_);
  std::swap(buttonactive_, other->buttonactive_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameMenu::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameMenu_descriptor_;
  metadata.reflection = GameMenu_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
