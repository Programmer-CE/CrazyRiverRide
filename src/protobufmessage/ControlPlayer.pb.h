// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ControlPlayer.proto

#ifndef PROTOBUF_ControlPlayer_2eproto__INCLUDED
#define PROTOBUF_ControlPlayer_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_ControlPlayer_2eproto();
void protobuf_AssignDesc_ControlPlayer_2eproto();
void protobuf_ShutdownFile_ControlPlayer_2eproto();

class ControlPlayer;

// ===================================================================

class ControlPlayer : public ::google::protobuf::Message {
 public:
  ControlPlayer();
  virtual ~ControlPlayer();

  ControlPlayer(const ControlPlayer& from);

  inline ControlPlayer& operator=(const ControlPlayer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ControlPlayer& default_instance();

  void Swap(ControlPlayer* other);

  // implements Message ----------------------------------------------

  inline ControlPlayer* New() const { return New(NULL); }

  ControlPlayer* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ControlPlayer& from);
  void MergeFrom(const ControlPlayer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ControlPlayer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 NUM_OF_PLAYER = 1;
  inline bool has_num_of_player() const;
  inline void clear_num_of_player();
  static const int kNUMOFPLAYERFieldNumber = 1;
  inline ::google::protobuf::int32 num_of_player() const;
  inline void set_num_of_player(::google::protobuf::int32 value);

  // required int32 XVelocity = 2;
  inline bool has_xvelocity() const;
  inline void clear_xvelocity();
  static const int kXVelocityFieldNumber = 2;
  inline ::google::protobuf::int32 xvelocity() const;
  inline void set_xvelocity(::google::protobuf::int32 value);

  // required int32 YVelocity = 3;
  inline bool has_yvelocity() const;
  inline void clear_yvelocity();
  static const int kYVelocityFieldNumber = 3;
  inline ::google::protobuf::int32 yvelocity() const;
  inline void set_yvelocity(::google::protobuf::int32 value);

  // required bool Shoot = 4;
  inline bool has_shoot() const;
  inline void clear_shoot();
  static const int kShootFieldNumber = 4;
  inline bool shoot() const;
  inline void set_shoot(bool value);

  // required bool Pause = 5;
  inline bool has_pause() const;
  inline void clear_pause();
  static const int kPauseFieldNumber = 5;
  inline bool pause() const;
  inline void set_pause(bool value);

  // @@protoc_insertion_point(class_scope:ControlPlayer)
 private:
  inline void set_has_num_of_player();
  inline void clear_has_num_of_player();
  inline void set_has_xvelocity();
  inline void clear_has_xvelocity();
  inline void set_has_yvelocity();
  inline void clear_has_yvelocity();
  inline void set_has_shoot();
  inline void clear_has_shoot();
  inline void set_has_pause();
  inline void clear_has_pause();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 num_of_player_;
  ::google::protobuf::int32 xvelocity_;
  ::google::protobuf::int32 yvelocity_;
  bool shoot_;
  bool pause_;
  friend void  protobuf_AddDesc_ControlPlayer_2eproto();
  friend void protobuf_AssignDesc_ControlPlayer_2eproto();
  friend void protobuf_ShutdownFile_ControlPlayer_2eproto();

  void InitAsDefaultInstance();
  static ControlPlayer* default_instance_;
};
// ===================================================================


// ===================================================================

// ControlPlayer

// required int32 NUM_OF_PLAYER = 1;
inline bool ControlPlayer::has_num_of_player() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ControlPlayer::set_has_num_of_player() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ControlPlayer::clear_has_num_of_player() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ControlPlayer::clear_num_of_player() {
  num_of_player_ = 0;
  clear_has_num_of_player();
}
inline ::google::protobuf::int32 ControlPlayer::num_of_player() const {
  // @@protoc_insertion_point(field_get:ControlPlayer.NUM_OF_PLAYER)
  return num_of_player_;
}
inline void ControlPlayer::set_num_of_player(::google::protobuf::int32 value) {
  set_has_num_of_player();
  num_of_player_ = value;
  // @@protoc_insertion_point(field_set:ControlPlayer.NUM_OF_PLAYER)
}

// required int32 XVelocity = 2;
inline bool ControlPlayer::has_xvelocity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ControlPlayer::set_has_xvelocity() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ControlPlayer::clear_has_xvelocity() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ControlPlayer::clear_xvelocity() {
  xvelocity_ = 0;
  clear_has_xvelocity();
}
inline ::google::protobuf::int32 ControlPlayer::xvelocity() const {
  // @@protoc_insertion_point(field_get:ControlPlayer.XVelocity)
  return xvelocity_;
}
inline void ControlPlayer::set_xvelocity(::google::protobuf::int32 value) {
  set_has_xvelocity();
  xvelocity_ = value;
  // @@protoc_insertion_point(field_set:ControlPlayer.XVelocity)
}

// required int32 YVelocity = 3;
inline bool ControlPlayer::has_yvelocity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ControlPlayer::set_has_yvelocity() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ControlPlayer::clear_has_yvelocity() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ControlPlayer::clear_yvelocity() {
  yvelocity_ = 0;
  clear_has_yvelocity();
}
inline ::google::protobuf::int32 ControlPlayer::yvelocity() const {
  // @@protoc_insertion_point(field_get:ControlPlayer.YVelocity)
  return yvelocity_;
}
inline void ControlPlayer::set_yvelocity(::google::protobuf::int32 value) {
  set_has_yvelocity();
  yvelocity_ = value;
  // @@protoc_insertion_point(field_set:ControlPlayer.YVelocity)
}

// required bool Shoot = 4;
inline bool ControlPlayer::has_shoot() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ControlPlayer::set_has_shoot() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ControlPlayer::clear_has_shoot() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ControlPlayer::clear_shoot() {
  shoot_ = false;
  clear_has_shoot();
}
inline bool ControlPlayer::shoot() const {
  // @@protoc_insertion_point(field_get:ControlPlayer.Shoot)
  return shoot_;
}
inline void ControlPlayer::set_shoot(bool value) {
  set_has_shoot();
  shoot_ = value;
  // @@protoc_insertion_point(field_set:ControlPlayer.Shoot)
}

// required bool Pause = 5;
inline bool ControlPlayer::has_pause() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ControlPlayer::set_has_pause() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ControlPlayer::clear_has_pause() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ControlPlayer::clear_pause() {
  pause_ = false;
  clear_has_pause();
}
inline bool ControlPlayer::pause() const {
  // @@protoc_insertion_point(field_get:ControlPlayer.Pause)
  return pause_;
}
inline void ControlPlayer::set_pause(bool value) {
  set_has_pause();
  pause_ = value;
  // @@protoc_insertion_point(field_set:ControlPlayer.Pause)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ControlPlayer_2eproto__INCLUDED
